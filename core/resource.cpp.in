/*
 *
 * $Id: sourceheader 511311 2006-02-19 14:51:05Z trueg $
 *
 * This file is part of the Nepomuk KDE project.
 * Copyright (C) 2006 Sebastian Trueg <trueg@kde.org>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include "resource.h"
#include "resourcedata.h"
#include "resourcemanager.h"
#include "tools.h"

#include <klocale.h>
#include <kdebug.h>

// FIXME: let the code generator do this
#include "tag.h"


Nepomuk::Resource::Resource()
{
    // invalid data
    m_data = new ResourceData();
    m_data->ref();
}


Nepomuk::Resource::Resource( const Nepomuk::Resource& res )
{
    m_data = res.m_data;
    m_data->ref();
}


Nepomuk::Resource::Resource( const QString& uri, const QString& type )
{
    m_data = ResourceData::data( uri, type );
    m_data->ref();
}


Nepomuk::Resource::Resource( Nepomuk::ResourceData* data )
{
    m_data = data;
    data->ref();
}


Nepomuk::Resource::~Resource()
{
    if( m_data->deref() == 0 ) {
        m_data->deleteData();
    }
}


Nepomuk::Resource& Nepomuk::Resource::operator=( const Resource& res )
{
    if( m_data != res.m_data ) {
        if ( m_data->deref() == 0 ) {
            m_data->deleteData();
        }
        m_data = res.m_data;
        m_data->ref();
    }

    return *this;
}


QString Nepomuk::Resource::uri() const
{
    m_data->determineUri();
    return m_data->uri();
}


QString Nepomuk::Resource::type() const
{
    m_data->determineUri();
    return m_data->type();
}


QString Nepomuk::Resource::className() const
{
    return type().section( QRegExp( "[#:]" ), -1 );
}


QHash<QString, Nepomuk::Variant> Nepomuk::Resource::allProperties() const
{
    return m_data->allProperties();
}


bool Nepomuk::Resource::hasProperty( const QString& uri ) const
{
    return m_data->hasProperty( uri );
}


Nepomuk::Variant Nepomuk::Resource::property( const QString& uri ) const
{
    return m_data->property( uri );
}


void Nepomuk::Resource::setProperty( const QString& uri, const Nepomuk::Variant& value )
{
    m_data->setProperty( uri, value );
}


void Nepomuk::Resource::removeProperty( const QString& uri )
{
    m_data->removeProperty( uri );
}


void Nepomuk::Resource::remove()
{
    m_data->remove();
}


bool Nepomuk::Resource::exists() const
{
    return m_data->exists();
}


bool Nepomuk::Resource::isValid() const
{
    return m_data->isValid();
}


bool Nepomuk::Resource::operator==( const Resource& other ) const
{
    if( this == &other )
        return true;

    if( this->m_data == other.m_data )
        return true;

    m_data->determineUri();
    other.m_data->determineUri();
    return uri() == other.uri();
}


QString Nepomuk::errorString( ErrorCode code )
{
    switch( code ) {
    case NoError:
        return i18n("Success");
    case CommunicationError:
        return i18n("Communication error");
    case InvalidType:
        return i18n("Invalid type in Database");
    default:
        return i18n("Unknown error");
    }
}

// do not remove, will be replaced with method definitions by the Nepomuk class generator
NEPOMUK_METHODS
